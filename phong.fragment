#version 330 core
#define MAX_LIGHTS 10
#define MAX_TEXS   5

uniform sampler2D diffTex;
uniform sampler2D lightTex;
uniform sampler2D normalTex;
uniform mat4 V;
uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 emissive;
uniform int numlights;
uniform struct Light{
	vec3 position;
	vec3 color;
}Lights[MAX_LIGHTS];

in vec3 normal_cam;
in vec3 eyedir_cam;
in vec3 pos_cam;
in vec2 UV;

out vec3 _color;

vec3 applyLight(Light light){
	vec3 spec,diff;
	vec4 texColor = vec4(0.f,0.f,0.f,1.f);

	vec3 lightDir_cam =  (V * vec4(light.position,1)).xyz - pos_cam;
	float diffAngle = clamp(dot(lightDir_cam,normal_cam),0,1);

	texColor = texture(diffTex,UV);
	if(texColor.a < 0.01)
		discard;
	
	diff = light.color * diffAngle * diffuse * texColor.rgb;
	clamp(diff, 0.0, 1.0);

	vec3 reflect_cam = reflect(-lightDir_cam,normal_cam);
	float specAngle = clamp(dot(reflect_cam,eyedir_cam),0,1);
	spec = specAngle * light.color * .01f;
	clamp(spec, 0.0, 1.0);

	return diff + spec;
}

void main()
{
	_color = vec3(0.f);
	for(int i = 0;i < numlights;i++){
		_color += applyLight(Lights[i]);
	}
	_color += clamp(emissive, 0.0f, 0.1f);
	_color += clamp(ambient, 0.0f, 0.1f) * .1f;
	//_color += texture(diffTex,UV).rgb;
	//_color += texture(lightTex,UV);
}