#version 330 core
#define MAX_LIGHTS 10
#define MAX_TEXS   3

uniform sampler2D tex[MAX_TEXS];
uniform mat4 V;
uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float K;
uniform float gloss;
uniform int numlights;
uniform struct Light{
	vec3 position;
	vec3 color;
}Lights[MAX_LIGHTS];

in vec3 normal_cam;
in vec3 eyedir_cam;
in vec3 pos_cam;
in vec2 UV;

out vec3 color;

vec3 applyLight(Light light){
	vec3 spec,diff;

	vec3 lightDir_cam =  (V * vec4(light.position,1)).xyz - pos_cam;
	float diffAngle = 1.f;//clamp(dot(lightDir_cam,normal_cam),0,1);
	diff = light.color * diffAngle * diffuse;

	vec3 reflect_cam = reflect(-lightDir_cam,normal_cam);
	float specAngle = clamp(dot(reflect_cam,eyedir_cam),0,1);
	spec = specAngle * light.color * .01f;
	return diff + spec;
}

void main()
{
	for(int i = 0;i < numlights;i++){
		color += applyLight(Lights[i]) * .5f;
	}
	color += emissive * .001f;
	color += (ambient) * .001f;
	//color.b = 1.f;
}